{"version":3,"sources":["components/Expenses/ExpeseDate/ExpenseDate.js","components/UI/Card/Card.js","components/Expenses/ExpensesItem/ExpenseItem.js","components/Expenses/ExpensesList/ExpensesList.js","components/Expenses/ExpenseFilter/ExpensesFilter.js","components/Chart/ChartBar/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses/Expenses.js","components/NewExpense/ExpenseForm/ExpenseForm.js","components/NewExpense/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpenseDate","props","day","date","toLocaleString","month","year","getFullYear","className","Card","classes","children","ExpenseItem","title","price","ExpensesList","items","length","map","expense","id","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMax","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredPrice","setEnteredPrice","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","NewExpense","enteredExpenseData","random","onAddExpense","INTITIAL_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff6590cf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ExpenseDate.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","/*\r\n    No import React is required in modern react app.\r\n */\r\nimport React from \"react\"; \r\nimport './Card.css'\r\n\r\n\r\n/*\r\n    Card is a wrapper component. Which is used as a wrapper when many other\r\n    components share some common desing/property.\r\n\r\n    NOTE: props.children is by default provided by React library.\r\n    Which is equal to all the elements between the wrapper elements.\r\n*/\r\n\r\nconst Card = (props) => {\r\n  const classes = 'card ' + props.className;\r\n  return <div className={classes}>{props.children}</div>\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"../ExpeseDate/ExpenseDate\";\r\nimport Card from \"../../UI/Card/Card\";\r\n\r\n/* we can have only one root element in return statement.\r\n    means return (<div>hello</div>\r\n                  <div>world</div>)\r\n    is not allowed.\r\n\r\n*/\r\n\r\n/*  all props starting with \"on\" are provided by react\r\n    by default to handle events.\r\n    like \"onClick\"\r\n */\r\n\r\nconst ExpenseItem = (props) => {\r\n\r\n    // const [title, setTitle] = useState(props.title);\r\n\r\n    // const clickHandler = ()=>{\r\n    //   setTitle(\"updated!\");\r\n    //   console.log(props.title);\r\n    //   console.log(title);\r\n    // }\r\n\r\n    return (\r\n        <li>\r\n            <Card className=\"expense-item\">\r\n                <div>\r\n                    <ExpenseDate date={props.date}/>\r\n                </div>\r\n                <div className=\"expense-item__description\">\r\n                    <h2>{props.title}</h2>\r\n                    <div className=\"expense-item__price\">${props.price}</div>\r\n                    {/* <button onClick={clickHandler}>change title</button> */}\r\n                </div>\r\n            </Card>\r\n        </li>\r\n\r\n    );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import React from 'react';\r\nimport ExpenseItem from \"../ExpensesItem/ExpenseItem\";\r\nimport './ExpensesList.css'\r\n\r\nconst ExpensesList = (props) => {\r\n\r\n    if (props.items.length === 0)\r\n        return (<h2 className=\"expenses-list__fallback\">No Expenses Found!!</h2>)\r\n\r\n    return (<ul className=\"expenses-list\">\r\n        {props.items.map(expense => {\r\n            return (\r\n                <ExpenseItem\r\n                    title={expense.title}\r\n                    price={expense.price}\r\n                    date={expense.date}\r\n                    key={expense.id}\r\n                />);\r\n        })}\r\n    </ul>)\r\n}\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport \"./ExpensesFilter.css\";\r\nconst ExpensesFilter = (props) => {\r\n\r\n\r\n  const dropdownChangeHandler = (event) => {\r\n      props.onChangeFilter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by Year</label>\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default ExpensesFilter;","import React from 'react';\r\nimport './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n\r\n    let barFillHeight = '0%';\r\n\r\n    if(props.maxValue > 0)\r\n    {\r\n        barFillHeight = Math.round(((props.value)/props.maxValue)*100) +'%';\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-bar\">\r\n            <div className=\"chart-bar__inner\">\r\n                <div className=\"chart-bar__fill\" style={{height:barFillHeight}}></div>\r\n            </div>\r\n            <div className=\"chart-bar__label\">{props.label}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartBar;\r\n","import React from 'react';\r\nimport ChartBar from \"./ChartBar/ChartBar\";\r\nimport './Chart.css'\r\n\r\nconst Chart = (props) => {\r\n\r\n    const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value );\r\n    const totalMax = Math.max(...dataPointValues);\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            {\r\n                props.dataPoints.map(dataPoint => {\r\n                    return <ChartBar\r\n                        label={dataPoint.label}\r\n                        value={dataPoint.value}\r\n                        maxValue={totalMax}\r\n                        key={dataPoint.label}/>\r\n                })\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport Chart from '../Chart/Chart';\r\n\r\nconst ExpensesChart = (props) => {\r\n\r\n    const chartDataPoints = [\r\n        {label:\"Jan\",value:0},\r\n        {label:\"Feb\",value:0},\r\n        {label:\"Mar\",value:0},\r\n        {label:\"Apr\",value:0},\r\n        {label:\"May\",value:0},\r\n        {label:\"Jun\",value:0},\r\n        {label:\"Jul\",value:0},\r\n        {label:\"Aug\",value:0},\r\n        {label:\"Sep\",value:0},\r\n        {label:\"Oct\",value:0},\r\n        {label:\"Nov\",value:0},\r\n        {label:\"Dec\",value:0},\r\n    ]\r\n\r\n\r\n\r\n    for(const expense of props.expenses)\r\n    {\r\n        const expenseMonth = expense.date.getMonth(); // starting at 0 ==> January ==> 0\r\n        chartDataPoints[expenseMonth].value += expense.price;\r\n    }\r\n\r\n    return <Chart dataPoints={chartDataPoints}/>\r\n}\r\n\r\n\r\n\r\nexport default ExpensesChart;\r\n","import React, {useState} from \"react\";\r\nimport ExpensesList from '../ExpensesList/ExpensesList';\r\nimport Card from \"../../UI/Card/Card\";\r\nimport \"./Expenses.css\";\r\nimport ExpensesFilter from \"../ExpenseFilter/ExpensesFilter\";\r\nimport ExpensesChart from \"../ExpensesChart\";\r\n\r\nconst Expenses = (props) => {\r\n    const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n    const filterChangeHandler = (selectedYear) => {\r\n        setFilteredYear(selectedYear);\r\n    };\r\n\r\n    const filteredExpenses = props.items.filter(expenses => {\r\n        return expenses.date.getFullYear().toString() === filteredYear;\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <Card className=\"expenses\">\r\n            {/* two way binding or controlled component */}\r\n            <ExpensesFilter\r\n                selected={filteredYear}\r\n                onChangeFilter={filterChangeHandler}\r\n            />\r\n            <ExpensesChart expenses={filteredExpenses}/>\r\n            <ExpensesList items={filteredExpenses}/>\r\n\r\n            {/* In java script if first argument in and operation is true then it returns the second\r\n                argument.\r\n            */}\r\n            {/*{filteredExpenses.length === 0 && <p>No expenses found!!</p>}*/}\r\n\r\n            {/*{filteredExpenses.length > 0 && filteredExpenses.map((expense) => {*/}\r\n            {/*    return (*/}\r\n            {/*        <ExpenseItem*/}\r\n            {/*            title={expense.title}*/}\r\n            {/*            price={expense.price}*/}\r\n            {/*            date={expense.date}*/}\r\n            {/*            key={expense.id}*/}\r\n            {/*        />*/}\r\n            {/*    );*/}\r\n            {/*})}*/}\r\n\r\n            {/* We are using javascript property of \"AND\" operator to short the code below*/}\r\n\r\n            {/*{filteredExpenses.length === 0 ? <p>No expenses found!!</p> : filteredExpenses.map((expense) => {*/}\r\n            {/*    return (*/}\r\n            {/*        <ExpenseItem*/}\r\n            {/*            title={expense.title}*/}\r\n            {/*            price={expense.price}*/}\r\n            {/*            date={expense.date}*/}\r\n            {/*            key={expense.id}*/}\r\n            {/*        />*/}\r\n            {/*    );*/}\r\n            {/*})}*/}\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  /* \r\n        This is multiple state concept :\r\n        we can independently initialize multiple states and manage them.\r\n        But there is also a way to manage multiple state as one state.\r\n        NOTE: individual state management is better because it is independent\r\n        of previous state of other variables.\r\n    */\r\n\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredPrice, setEnteredPrice] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  /* \r\n        By passing multiple state as one object in useState hook\r\n        we can convert multiple state management into one state management.\r\n        But there are some concepts behind this methods. So for simplicity\r\n        it is better to use individual state management.\r\n    */\r\n\r\n  //   useState({\r\n  //     enteredTitle: \"\",\r\n  //     enteredPrice: \"\",\r\n  //     enteredDate: \"\",\r\n  //   });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n\r\n    /*  The below method will work fine,\r\n        Yet this method is not recommended in case of single state management because\r\n        -->React schedules state updates it doesn't do it instantly so theoritically if \r\n        we schedule lots of state updates simultaneously then we may loose some of state\r\n        updates.<--\r\n    */\r\n    // setUserInput({\r\n    //   ...userInput, // we are using spread operator so that we don't loose the previous state.\r\n    //   enteredTitle: event.target.value, // we are overriding the title value keeping previous state of other(date,price) variables intact.\r\n    // });\r\n\r\n    /*\r\n        This method is recommended in case of single state management;\r\n        Remember if state update depends on previous state(prevState) then use the below\r\n        function form.\r\n     */\r\n\r\n    // setUserInput((prevState) => {\r\n    //   return { ...userInput, enteredDate: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const priceChangeHandler = (event) => {\r\n    setEnteredPrice(event.target.value);\r\n\r\n    /*  The below method will work fine,\r\n        Yet this method is not recommended in case of single state management because\r\n        -->React schedules state updates it doesn't do it instantly so theoritically if \r\n        we schedule lots of state updates simultaneously then we may loose some of state\r\n        updates.<--\r\n    */\r\n    // setUserInput({\r\n    //   ...userInput, // we are using spread operator so that we don't loose the previous state.\r\n    //   enteredPrice: event.target.value, // we are overriding the price value keeping previous state of other(date,title) variables intact.\r\n    // });\r\n\r\n    /*\r\n        This method is recommended in case of single state management;\r\n        Remember if state update depends on previous state(prevState) then use the below\r\n        function form.\r\n     */\r\n\r\n    // setUserInput((prevState) => {\r\n    //   return { ...userInput, enteredDate: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n\r\n    /*  The below method will work fine,\r\n        Yet this method is not recommended in case of single state management because\r\n        -->React schedules state updates it doesn't do it instantly so theoritically if \r\n        we schedule lots of state updates simultaneously then we may loose some of state\r\n        updates.<--\r\n    */\r\n\r\n    // setUserInput({\r\n    //   ...userInput, // we are using spread operator so that we don't loose the previous state.\r\n    //   enteredDate: event.target.value, // we are overriding the date value keeping previous state of other(title,price) variables intact.\r\n    // });\r\n\r\n    /*\r\n        This method is recommended in case of single state management;\r\n        Remember if state update depends on previous state(prevState) then use the below\r\n        function form.\r\n     */\r\n\r\n    // setUserInput((prevState) => {\r\n    //   return { ...userInput, enteredDate: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      price: enteredPrice,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    /*\r\n      expenseData is required in App.js component.\r\n      We know that we can send data from parent to child by using props.\r\n      But how to send data from \"child to parent\" ?\r\n      Here is a technique.\r\n     */\r\n    props.onSaveExpenseData(expenseData); // for passing data from child to parent. or it is called \"LIFTING THE STATE UP\"\r\n\r\n    setEnteredTitle(\"\"); // for two way binding --> set the value of input filed to empty after form is submited;\r\n    setEnteredPrice(\"\"); // for two way binding --> set the value of input filed to empty after form is submited;\r\n    setEnteredDate(\"\"); // for two way binding --> set the value of input filed to empty after form is submited;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__contorls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle} // for two way binding.\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Price</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.1\"\r\n            step=\"0.1\"\r\n            value={enteredPrice} // for two way binding.\r\n            onChange={priceChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate} // for two way binding.\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"../ExpenseForm/ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  const onSaveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = { ...enteredExpenseData, id: Math.random().toString() };\r\n    // \"LIFTING THE STATE UP\"\r\n    props.onAddExpense(expenseData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {/*\r\n        onSaveExpenseDataHandler is used to pass data from child to parent.\r\n        \"LIFTING THE STATE UP\"\r\n      */}\r\n      <ExpenseForm onSaveExpenseData={onSaveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import Expenses from \"./components/Expenses/Expenses/Expenses\";\r\nimport React, { useState } from \"react\";\r\nimport NewExpense from \"./components/NewExpense/NewExpense/NewExpense\";\r\n\r\nconst INTITIAL_EXPENSES = [\r\n  {\r\n    id: \"e1\",\r\n    date: new Date(2020, 8, 25),\r\n    title: \"Car Insurance\",\r\n    price: 200,\r\n  },\r\n  {\r\n    id: \"e2\",\r\n    date: new Date(2021, 2, 28),\r\n    title: \"Book\",\r\n    price: 300,\r\n  },\r\n  {\r\n    id: \"e3\",\r\n    date: new Date(2022, 3, 21),\r\n    title: \"Grocery\",\r\n    price: 150,\r\n  },\r\n\r\n  {\r\n    id: \"e4\",\r\n    date: new Date(2019, 6, 12),\r\n    title: \"Travel\",\r\n    price: 250,\r\n  },\r\n];\r\n\r\nconst App = () => {\r\n  const [expenses, setExpenses] = useState(INTITIAL_EXPENSES);\r\n\r\n  const addExpenseHandler = (expense) => {\r\n    setExpenses((prevExpenses) => {\r\n      return [expense, ...expenses];\r\n    });\r\n  };\r\n\r\n  /* This javascript equivalent code for JSX\r\n    React under the hood converts JSX in this format\r\n    making development easy.\r\n */\r\n\r\n  //  return React.createElement(\r\n  //      'div',\r\n  //      {},\r\n  //      React.createElement('h1',{},\"let's get started!\"),\r\n  //      React.createElement(Expenses,{items: expenses})\r\n  // );\r\n\r\n  return (\r\n    <div>\r\n      {/* \"LIFTING THE STATE UP\" */}\r\n      <NewExpense onAddExpense={addExpenseHandler} />\r\n      <Expenses items={expenses} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}